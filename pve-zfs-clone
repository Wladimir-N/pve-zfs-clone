#!/bin/bash

error () {
	if [[ $1 = snapshot ]]
	then
		echo 'Ошибка при создании снапшота'
	elif [[ $1 = zfsclone ]]
	then
		echo 'Ошибка при создании клона из снапшота'
	elif [[ $1 = config ]]
	then
		echo 'Ошибка при создании конфига контейнера'
	elif [[ $1 = destroyLXC ]]
	then
		echo 'Ошибка удаления LXC контейнера'
	fi
	exit
}
VAR=$(whiptail --title "Меню скрипта" --menu \
	"Вас приветствует скрипт для удобного клонирования и управления клонами в Proxmox" 23 77 16 \
	"1" "Клонировать" \
	"2" "Обновить клон" \
	"3" "Создать шаблон на основе снапшота" 3>&1 1>&2 2>&3) || exit
if [ $VAR -eq 1 ]
then
	CLONE=$(whiptail --title "Что клонировать?" --menu \
		"Выберите тип" 23 77 16 \
		"1" "LXC" \
		"2" "KVM" 3>&1 1>&2 2>&3) || exit
	if [ $CLONE -eq 1 ]
	then
		list=()
		while read VMID Name
		do
			list+=("$VMID" "$Name")
		done < <(pct list | awk '{print $1,$3}' | awk 'FNR>1')
		LXC=$(whiptail --title "Какой контейнер?" --menu \
			"Выберите контейнер, если контейнера нет в списке запустите скрипт на хосте где расположен контейнер" 23 77 16 \
			"${list[@]}" 3>&1 1>&2 2>&3) || exit

		#проверяем, что контейнер не имеет нестандартных подключенных дисков
		if [ "$(pct config $LXC | grep -E '(rootfs|mp[0-9]+): .*,size=[0-9]+' | cut -d ':' -f 3 | cut -d ',' -f 1 | grep $LXC | wc -l)" -eq "$(pct config $LXC | grep -E '(rootfs|mp[0-9]+): .*,size=[0-9]+' | cut -d ':' -f 3 | cut -d ',' -f 1 |  wc -l)" ]
		then
			while [ true ]
			do
				NEWVMID=$(whiptail --title  "Выбор VMID" --inputbox  "Введите VMID для клона" 10 60 `pvesh get /cluster/nextid` 3>&1 1>&2 2>&3) || exit
				#проверяем что пользователь указал не занятый ID
				if [ $(cat /etc/pve/.vmlist | awk '{print $1}' | grep -E "$NEWVMID") ]
				then
					whiptail --title  "Ошибка" --msgbox  "VMID занят" 10 60
				else
					break
				fi
			done
			pct snapshot $LXC VMID$NEWVMID || error snapshot
			while read subvolume
			do
				zfs clone $(df | grep $subvolume | awk '{print $1}')@VMID$NEWVMID $(df | grep $subvolume | awk '{print $1}' | sed "s/$LXC/$NEWVMID/") || error zfsclone
			done < <(pct config $LXC | grep -E '(rootfs|mp[0-9]+): .*,size=[0-9]+' | cut -d ':' -f 3 | cut -d ',' -f 1)
			pct config $LXC | sed -E "s/(rootfs|mp[0-9]+)(: .*:.*)$LXC(.*,size=[0-9]+)/\1\2$NEWVMID\3/g" > /etc/pve/lxc/$NEWVMID.conf || error config
			echo -e '\033[0m\n\033[0m\033[31mСмените MAC и IP если это необходимо!!!\033[0m'
		else
			echo 'Субволюм контейнера который Вы хотите склонировать не имеет в своём имени VMID контейнера. Выполните клонирование в ручном режиме или пересоздайте субволюмы с правильными именами.'
			exit
		fi
	elif [ $CLONE -eq 2 ]
	then
		list=()
		while read VMID Name
		do
			list+=("$VMID" "$Name")
		done < <(qm list | awk '{print $1,$2}' | awk 'FNR>1')
		LXC=$(whiptail --title "Какую VM?" --menu \
			"Выберите VM, если VM нет в списке запустите скрипт на хосте где расположена VM" 23 77 16 \
			"${list[@]}" \
			"0" "Выход" 3>&1 1>&2 2>&3)
		exitstatus=$?
		if [ $exitstatus -eq 0 ]
		then
			echo 'Функционал ещё не реализован'
		else
			exit
		fi
	fi
elif [ $VAR -eq 2 ]
then
	# Получаем список клонированных файловых систем
	table=$(join \
		<(sort <(pct list | tail -n +2 | awk '{print $1, "pct", $2, $3}' ; qm list | tail -n +2 | awk '{print $1, "qm", $3, $2}')) \
		<(zfs list -H -o name,origin | awk '$2 != "-"' | awk 'match($1, /-[0-9][0-9][0-9]-disk/) { print substr($1, RSTART+1, 3), $0, substr($2, RSTART+1, 3)}'))
	#echo "table" #debug
	#echo "$table" #debug	
	
	# Вычисляем клонированные виртуальные машины и контейнеры
	# sort -u группирует строки с одинаковыми парами VMID, VMID_origin. Такие пары будут появляться если VMID имеет несколько склонированных zfs дисков
	# uniq -u -f5 убирает строки с одинаковыми VMID. Такие строки могут получиться, если VMID имеет несколько склонированных zfs дисков из разных VMID_origin. Такие VMID мы пропускаем
	table_vmid=$(echo "$table" | awk '{print $1, $2, $3, $4, $7, $1}' | sort -u | uniq -u -f5 )
	#echo "table_vmid" #debug
	#echo "$table_vmid" #debug
	
	list=()
	while read VMID Type State Name VMID_origin
	do
		list+=("$VMID" "$Name") # !!!! whiptail перестает работать после добавления других столбцов !!!! 
	done < <(echo "$table_vmid")
	
	while [ true ]; do
		LXC=$(whiptail --title "Какой контейнер?" --menu \
			"Выберите контейнер, если контейнера нет в списке запустите скрипт на хосте где расположен контейнер" 23 77 16 \
			"${list[@]}" 3>&1 1>&2 2>&3) || exit
		
		# stop ct or vm
		type=$(echo "$table_vmid" | awk "\$1 == $LXC" | awk '{print $2}')
		#echo "type: $type" #debug
		$type stop $LXC
		
		zfs_clone_list=$(echo "$table" | awk "\$1 == $LXC" | awk '{print $5}')
		#echo "zfs_clone_list: $zfs_clone_list" #debug
		while read zfs; do
			# destroy clone
			# Следующая команда не выполнится, если целевая файловая система будет иметь дочерние клоны
			# use -nvp for safe debug 
			zfs destroy -r $zfs
			exitstatus=$?
			if [ $exitstatus -ne 0 ]; then
				whiptail --title  "Ошибка" --msgbox  "Вероятно файловая система имеет дочерние клоны, см. ошибку в консоли" 10 60
				echo -e "\033[0m\n\033[0m\033[31mВероятно файловая система имеет дочерние клоны, см. ошибку в консоли\033[0m"
				exit
			fi
			#echo "$table" | awk "\$5 == \"${zfs}\""
			
			# destroy snap origin
			zfs_snap_origin=$(echo "$table" | awk "\$5 == \"${zfs}\"" | awk '{print $6}')
			#echo "zfs_snap_origin: $zfs_snap_origin" #debug
			zfs destroy -r $zfs_snap_origin
			exitstatus=$?
			if [ $exitstatus -ne 0 ]; then
				whiptail --title  "Ошибка" --msgbox  "Вероятно снимок имеет дочерние клоны, см. ошибку в консоли" 10 60
				echo -e "\033[0m\n\033[0m\033[31mВероятно снимок имеет дочерние клоны, см. ошибку в консоли\033[0m"
				exit
			fi
			
			#create new zfs origin snapshot and clone
			zfs snapshot $zfs_snap_origin
			zfs clone $zfs_snap_origin $zfs
		done < <(echo "$zfs_clone_list")
		
		#start stop ct or vm
		$type start $LXC
		whiptail --title  "Успех" --msgbox  "Клон $LXC успешно обновлен" 10 60
		echo -e "\033[0m\n\033[0m\033[31mКлон $LXC успешно обновлен\033[0m"
	done
	
elif [ $VAR -eq 3 ]
then
	echo 'Функционал ещё не реализован'
fi
